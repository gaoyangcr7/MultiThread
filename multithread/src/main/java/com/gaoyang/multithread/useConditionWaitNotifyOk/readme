关键字 synchronized与wait()和 notify/notify()方法相结合可以实现等待/通知模式,类 Reentrantlock也可以实现同样的功能,但需要借助于 Condition对象。
Condition类是在JDK5中出现的技术,使用它有更好的灵活性,比如可以实现多路通知功能,也就是在个Lock对象里面可以创建多个 Condition(即对象监视器)实例,线程对象可以注册在指定的 Condition中,从而可以有选择性地进行线程通知,在调度线程上更加灵活。
在使用 notify/notifyall)方法进行通知时,被通知的线程却是由JVM随机选择的。但使用 Reentrantlock结合 Condition类是可以实现前面介绍过的“选择性通知”,这个功能是非常重要的,而且在 Condition类中是默认提供的。
而 synchronized就相当于整个Lock对象中只有一个单一的 Condition对象,所有的线程都注册在它一个对象的身上。线程开始 notify()时,需要通知所有的 WAITING线程,没有选择权,会出现相当大的效率间题。

成功实现等待/通知模式
Object类中的wait()方法相当于 Condition类中的await()方法
Object类中的 wait(long timeou)方法相当于 Condition类中的 await(long time, Timeunit unit)方法。
Object类中的 notify方法相当于 Condition类中的 signal()方法。
Object类中的 notifyAll()方法相当于 Condition类中的 signalAll()方法。