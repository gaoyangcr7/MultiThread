
Run.java
1，“非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题，所得结果也就是“线程安全”的了
2，如果多个线程共同访问同一个实例变量，则有可能出现“非线程安全”的问题。


HasSelfPrivateNumber.java
1，addI不带synchronized的时候：若num是方法内部局部变量，num同步；如果是方法外面的实例变量，则非同步
2，addI带synchronized的时候：无论num是局部还是实例变量，都同步
输出：a set over!
    b set over!
    b num=200
    a num=100


结论：在两个线程访问同一个对象中的同步方法时，一定是线程安全的。

#   关键字Synchronized取得的锁都是对象锁，而不是把一段代码或方法（函数）当做锁，所以在上面的例子中，哪个线程先执行带synchronized
关键字的方法，哪个线程就持有该方法所述对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的是同一个对象。